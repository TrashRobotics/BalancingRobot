#define LOGO_WIDTH 64
#define LOGO_HEIGHT 64

#define BATTERY_WIDTH 56
#define BATTERY_HEIGHT 27

#define FACE_WIDTH 80
#define FACE_HEIGHT 60

const uint8_t logoBits[] PROGMEM = {
   0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff,
   0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x80, 0x3f, 0x00, 0x00,
   0x00, 0x00, 0x3f, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00,
   0x00, 0xe0, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x80, 0x07, 0x00,
   0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x38, 0x00, 0x00,
   0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00,
   0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x07, 0x00, 0x00,
   0x00, 0x00, 0xe0, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01,
   0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0xe0, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x07, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
   0x70, 0xf0, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0e, 0x38, 0xf0, 0xff, 0xff,
   0xff, 0x00, 0x00, 0x1c, 0x18, 0xf0, 0xff, 0xff, 0xff, 0x00, 0x00, 0x18,
   0x1c, 0xf0, 0xff, 0xff, 0xff, 0x00, 0x00, 0x38, 0x0c, 0xf0, 0xff, 0xff,
   0xff, 0x00, 0x00, 0x30, 0x0c, 0xf0, 0xff, 0xff, 0xff, 0x00, 0x00, 0x30,
   0x0e, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x00, 0x70, 0x06, 0x00, 0x80, 0x1f,
   0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x80, 0x9f, 0xff, 0x3f, 0x00, 0x60,
   0x07, 0x00, 0x80, 0x9f, 0xff, 0xff, 0x00, 0xe0, 0x03, 0x00, 0x80, 0x9f,
   0xff, 0xff, 0x03, 0xc0, 0x03, 0x00, 0x80, 0x9f, 0xff, 0xff, 0x07, 0xc0,
   0x03, 0x00, 0x80, 0x9f, 0xff, 0xff, 0x0f, 0xc0, 0x03, 0x00, 0x80, 0x9f,
   0x0f, 0xf0, 0x0f, 0xc0, 0x03, 0x00, 0x80, 0x9f, 0x0f, 0xe0, 0x1f, 0xc0,
   0x03, 0x00, 0x80, 0x9f, 0x0f, 0xc0, 0x1f, 0xc0, 0x03, 0x00, 0x80, 0x9f,
   0x0f, 0x80, 0x1f, 0xc0, 0x03, 0x00, 0x80, 0x9f, 0x0f, 0x80, 0x1f, 0xc0,
   0x03, 0x00, 0x80, 0x9f, 0x0f, 0x80, 0x1f, 0xc0, 0x03, 0x00, 0x80, 0x9f,
   0x0f, 0xc0, 0x0f, 0xc0, 0x03, 0x00, 0x80, 0x9f, 0x0f, 0xc0, 0x0f, 0xc0,
   0x03, 0x00, 0x80, 0x9f, 0x0f, 0xe0, 0x07, 0xc0, 0x03, 0x00, 0x80, 0x9f,
   0xff, 0xff, 0x07, 0xc0, 0x03, 0x00, 0x80, 0x9f, 0xff, 0xff, 0x03, 0xc0,
   0x07, 0x00, 0x80, 0x9f, 0xff, 0xff, 0x01, 0xe0, 0x06, 0x00, 0x80, 0x9f,
   0xff, 0x7f, 0x00, 0x60, 0x06, 0x00, 0x80, 0x9f, 0xff, 0x3f, 0x00, 0x60,
   0x0e, 0x00, 0x80, 0x9f, 0x0f, 0x7e, 0x00, 0x70, 0x0c, 0x00, 0x80, 0x9f,
   0x0f, 0xfc, 0x00, 0x30, 0x0c, 0x00, 0x80, 0x9f, 0x0f, 0xfc, 0x01, 0x30,
   0x1c, 0x00, 0x80, 0x9f, 0x0f, 0xf8, 0x01, 0x38, 0x18, 0x00, 0x80, 0x9f,
   0x0f, 0xf0, 0x03, 0x18, 0x38, 0x00, 0x80, 0x9f, 0x0f, 0xf0, 0x03, 0x1c,
   0x70, 0x00, 0x80, 0x9f, 0x0f, 0xe0, 0x07, 0x0e, 0x60, 0x00, 0x80, 0x9f,
   0x0f, 0xe0, 0x07, 0x06, 0xe0, 0x00, 0x80, 0x9f, 0x0f, 0xc0, 0x0f, 0x07,
   0xc0, 0x01, 0x80, 0x9f, 0x0f, 0xc0, 0x8f, 0x03, 0x80, 0x03, 0x80, 0x9f,
   0x0f, 0x80, 0xc7, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
   0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x1c, 0x00, 0x00,
   0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00,
   0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0xe0, 0x01, 0x00,
   0x00, 0x80, 0x07, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0xe0, 0x01, 0x00,
   0x00, 0x00, 0x3f, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00,
   0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x07, 0x00, 0x00,
   0x00, 0x00, 0x80, 0xff, 0xff, 0x00, 0x00, 0x00 };
   
  
const uint8_t batteryBits[] PROGMEM = {
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xf3, 0x07, 0x00,
   0x10, 0x00, 0x00, 0x06, 0x0b, 0x08, 0x00, 0x30, 0x00, 0x00, 0x06, 0x0b,
   0x88, 0x00, 0x70, 0x00, 0x00, 0xfe, 0x0b, 0x88, 0x01, 0xd0, 0x00, 0x00,
   0xfe, 0x0b, 0x88, 0x03, 0xd0, 0x01, 0x00, 0xc6, 0x0b, 0x8a, 0x06, 0x50,
   0x03, 0x00, 0xc6, 0x0b, 0x09, 0x0d, 0xd0, 0x06, 0x00, 0xc6, 0x8b, 0x08,
   0x1a, 0x50, 0x0d, 0x00, 0xc6, 0x4b, 0x08, 0x34, 0x50, 0x1a, 0x00, 0xc6,
   0x2b, 0x08, 0x68, 0x50, 0x34, 0x00, 0xc6, 0x0b, 0x0a, 0xd0, 0x50, 0x68,
   0x00, 0xc6, 0x0b, 0x09, 0xa0, 0x51, 0xd0, 0x00, 0xc6, 0x8b, 0x08, 0x40,
   0x53, 0xa0, 0x01, 0xc6, 0x4b, 0x08, 0x80, 0x56, 0x40, 0x03, 0xc6, 0x2b,
   0x08, 0x00, 0x5d, 0x80, 0x06, 0xc6, 0x0b, 0x08, 0x00, 0x5a, 0x00, 0x0d,
   0xc6, 0x0b, 0x08, 0x00, 0x74, 0x00, 0x0a, 0xfe, 0x0b, 0x08, 0x00, 0x68,
   0x00, 0x0c, 0xfe, 0x0b, 0x08, 0x00, 0x50, 0x00, 0x08, 0x06, 0x0b, 0x04,
   0x00, 0x60, 0x00, 0x00, 0x06, 0xf3, 0x07, 0x00, 0x40, 0x00, 0x00, 0x06,
   0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07 };


const uint8_t faceHappyBits[] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x3f,
   0x00, 0x00, 0xf8, 0xff, 0xff, 0x01, 0xc0, 0xff, 0xff, 0x7f, 0x00, 0x00,
   0xfc, 0xff, 0xff, 0x03, 0xe0, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff,
   0xff, 0x07, 0xe0, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07,
   0x60, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00,
   0x00, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0xc0, 0x7f, 0x00, 0x00, 0x00,
   0x00, 0xfc, 0x0f, 0x00, 0x00, 0xf0, 0xff, 0x01, 0x00, 0x00, 0x00, 0xff,
   0x3f, 0x00, 0x00, 0xf8, 0xff, 0x01, 0x00, 0x00, 0x80, 0xff, 0x3f, 0x00,
   0x00, 0xf8, 0xff, 0x03, 0x00, 0x00, 0x80, 0xff, 0x7f, 0x00, 0x00, 0xfc,
   0xff, 0x07, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x00, 0x00, 0xfc, 0xff, 0x07,
   0x00, 0x00, 0xc0, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00,
   0xe0, 0xff, 0xff, 0x01, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff,
   0xff, 0x01, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x01,
   0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x01, 0x00, 0xfe,
   0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x01, 0x00, 0xfe, 0xff, 0x0f,
   0x00, 0x00, 0xc0, 0xff, 0xff, 0x00, 0x00, 0xfc, 0xff, 0x07, 0x00, 0x00,
   0xc0, 0xff, 0xff, 0x00, 0x00, 0xfc, 0xff, 0x07, 0x00, 0x00, 0x80, 0xff,
   0x7f, 0x00, 0x00, 0xf8, 0xff, 0x03, 0x00, 0x00, 0x80, 0xff, 0x3f, 0x00,
   0x00, 0xf8, 0xff, 0x03, 0x00, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x00, 0xf0,
   0xff, 0x01, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0x00,
   0x00, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
   0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x3e,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xfe, 0x03, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x00,
   0x00, 0xf0, 0xff, 0x00, 0x00, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x00, 0xfe,
   0xff, 0x00, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x00,
   0x00, 0xce, 0xff, 0xff, 0x01, 0x00, 0xfe, 0xff, 0xef, 0x00, 0x00, 0x0e,
   0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0e, 0xf0, 0xff,
   0xff, 0xff, 0xff, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
   0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x3f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const uint8_t faceNormalBits[] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff,
   0x00, 0x00, 0xfe, 0xff, 0xff, 0x07, 0xe0, 0xff, 0xff, 0xff, 0x00, 0x00,
   0xfe, 0xff, 0xff, 0x07, 0xe0, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff,
   0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00,
   0x00, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0xc0, 0x7f, 0x00, 0x00, 0x00,
   0x00, 0xfc, 0x0f, 0x00, 0x00, 0xf0, 0xff, 0x01, 0x00, 0x00, 0x00, 0xff,
   0x3f, 0x00, 0x00, 0xf8, 0xff, 0x01, 0x00, 0x00, 0x80, 0xff, 0x3f, 0x00,
   0x00, 0xf8, 0xff, 0x03, 0x00, 0x00, 0x80, 0xff, 0x7f, 0x00, 0x00, 0xfc,
   0xff, 0x07, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x00, 0x00, 0xfc, 0xff, 0x07,
   0x00, 0x00, 0xc0, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00,
   0xe0, 0xff, 0xff, 0x01, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff,
   0xff, 0x01, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x01,
   0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x01, 0x00, 0xfe,
   0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x01, 0x00, 0xfe, 0xff, 0x0f,
   0x00, 0x00, 0xc0, 0xff, 0xff, 0x00, 0x00, 0xfc, 0xff, 0x07, 0x00, 0x00,
   0xc0, 0xff, 0xff, 0x00, 0x00, 0xfc, 0xff, 0x07, 0x00, 0x00, 0x80, 0xff,
   0x7f, 0x00, 0x00, 0xf8, 0xff, 0x03, 0x00, 0x00, 0x80, 0xff, 0x3f, 0x00,
   0x00, 0xf8, 0xff, 0x03, 0x00, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x00, 0xf0,
   0xff, 0x01, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0x00,
   0x00, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
   0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x0e,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xfe, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
   0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x0e,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


const uint8_t faceConfusedBits[] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xfc, 0x01, 0xf0, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0,
   0xff, 0x03, 0xf0, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x07,
   0xf8, 0xff, 0xff, 0x07, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x07, 0xf8, 0xff,
   0xff, 0xff, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x0f, 0xfc, 0xff, 0xff, 0xff,
   0x07, 0x80, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc,
   0xff, 0x07, 0x00, 0x00, 0xc0, 0xff, 0x7f, 0x00, 0x08, 0xfc, 0xff, 0x07,
   0x00, 0x00, 0xc0, 0xff, 0x7f, 0x00, 0x18, 0xfe, 0xff, 0x0f, 0x00, 0x00,
   0xe0, 0xff, 0xff, 0x00, 0x18, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff,
   0xff, 0x00, 0x18, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x00,
   0x18, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x00, 0x18, 0xfe,
   0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x00, 0x18, 0xfe, 0xff, 0x0f,
   0x00, 0x00, 0xc0, 0xff, 0x7f, 0x00, 0x18, 0xfc, 0xff, 0x07, 0x00, 0x00,
   0xc0, 0xff, 0x7f, 0x00, 0x3c, 0xfc, 0xff, 0x07, 0x00, 0x00, 0x80, 0xff,
   0x7f, 0x00, 0x3c, 0xf8, 0xff, 0x03, 0x00, 0x00, 0x80, 0xff, 0x3f, 0x00,
   0x3c, 0xf8, 0xff, 0x03, 0x00, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x3c, 0xf0,
   0xff, 0x01, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x00, 0x18, 0xc0, 0x7f, 0x00,
   0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
   0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x70, 0x00, 0xe0,
   0x03, 0x00, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0xf8, 0x00, 0xf0, 0x07, 0x00,
   0xe0, 0x00, 0x00, 0x0e, 0x00, 0xfc, 0x00, 0x78, 0x07, 0x00, 0xe0, 0x00,
   0x00, 0x0e, 0x00, 0xfe, 0x01, 0x3c, 0x0f, 0x00, 0xe0, 0x00, 0x00, 0x0e,
   0x00, 0xdf, 0x01, 0x1e, 0x1e, 0x00, 0xe0, 0x00, 0x00, 0xfe, 0xff, 0x8f,
   0x03, 0x0f, 0x1c, 0xe0, 0xff, 0x00, 0x00, 0xfe, 0xff, 0x87, 0x87, 0x07,
   0x38, 0xf0, 0xff, 0x00, 0x00, 0xfe, 0xff, 0x03, 0xc7, 0x03, 0x38, 0xf8,
   0xff, 0x00, 0x00, 0x0e, 0x00, 0x00, 0xef, 0x01, 0x70, 0x3c, 0xe0, 0x00,
   0x00, 0x0e, 0x00, 0x00, 0xfe, 0x00, 0xf0, 0x1e, 0xe0, 0x00, 0x00, 0x0e,
   0x00, 0x00, 0x7e, 0x00, 0xe0, 0x0f, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00,
   0x7c, 0x00, 0xc0, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00,
   0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


const uint8_t faceDisappointedBits[] PROGMEM = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
   0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01, 0xf0, 0xff,
   0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x03, 0xf0, 0xff, 0xff, 0x01,
   0x00, 0x00, 0x00, 0xfe, 0xff, 0x07, 0xf8, 0xff, 0xff, 0x07, 0x00, 0x00,
   0xc0, 0xff, 0xff, 0x07, 0xf8, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfc, 0xff,
   0xff, 0x0f, 0xfc, 0xff, 0xff, 0xff, 0x07, 0x80, 0xff, 0xff, 0xff, 0x1f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc,
   0xff, 0x07, 0x00, 0x00, 0xc0, 0xff, 0x7f, 0x00, 0x00, 0xfc, 0xff, 0x07,
   0x00, 0x00, 0xc0, 0xff, 0x7f, 0x00, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00,
   0xe0, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff,
   0xff, 0x00, 0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x00,
   0x00, 0xfe, 0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x00, 0x00, 0xfe,
   0xff, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0x0f,
   0x00, 0x00, 0xc0, 0xff, 0x7f, 0x00, 0x00, 0xfc, 0xff, 0x07, 0x00, 0x00,
   0xc0, 0xff, 0x7f, 0x00, 0x00, 0xfc, 0xff, 0x07, 0x00, 0x00, 0x80, 0xff,
   0x7f, 0x00, 0x00, 0xf8, 0xff, 0x03, 0x00, 0x00, 0x80, 0xff, 0x3f, 0x00,
   0x00, 0xf8, 0xff, 0x03, 0x00, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x00, 0xf0,
   0xff, 0x01, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0x00, 0x00, 0xc0, 0x7f, 0x00,
   0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xc0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xf1, 0x03, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xc0, 0x0f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x80, 0x1f, 0x80, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xe0, 0x0f, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8,
   0x03, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0xfe, 0x00, 0x00,
   0xf0, 0x03, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x3f, 0x00, 0x00, 0xc0, 0x0f,
   0xe0, 0x00, 0x00, 0x0e, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00,
   0x00, 0x0e, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x7e, 0xe0, 0x00, 0x00, 0x0e,
   0xfc, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xe1, 0x00, 0x00, 0xfe, 0x7f, 0x00,
   0x00, 0x00, 0x00, 0xe0, 0xff, 0x00, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0x00,
   0x00, 0x80, 0xff, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xff, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00,
   0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x0e,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };



const char controlHtml[] PROGMEM = R"=====(
<!doctype html>
<html>
	<head>
		<meta http-equiv="Content-type" content="text/html; charset=utf-8">
		<title>Balancig robot</title>
		<link rel="stylesheet" type="text/css" href="/general.css">
	</head>
	<body>
		<ul class="navbar">
		<li><a href="/">Control</a></li>
		<li><a href="/settings">Settings</a></li>
		<li><a href="/about">About</a></li>
		</ul>
		
		<div class="viewbox">
			<div class="controlPanel">
				<table class="controlTable">
					<tr>
						<td> <input type="button" class="arrow left" id="leftButton"> </td>
						<td> <input type="button" class="arrow up" id="upButton"> </td>
					</tr>
					<tr>
						<td> <input type="button" class="arrow down" id="downButton"> </td>
						<td> <input type="button" class="arrow right" id="rightButton"> </td>
					</tr>
				</table>
				<input type="button" class="central" id="centralButton">
			</div>
			
			<script>
				function move(direction, value)
				{
					var xhttp = new XMLHttpRequest();
					xhttp.open("GET", "move?direction=" + direction +"&value="+value, true); 
					xhttp.send();
				}
				leftButton.addEventListener("mousedown", function() { move("left", 1);});
				leftButton.addEventListener("touchstart", function() { move("left", 1);});
				leftButton.addEventListener("mouseup", function() { move("left", 0);});
				leftButton.addEventListener("touchend", function() { move("left", 0);});
				
				upButton.addEventListener("mousedown", function() { move("forward", 1);});
				upButton.addEventListener("touchstart", function() { move("forward", 1);});
				upButton.addEventListener("mouseup", function() { move("forward", 0);});
				upButton.addEventListener("touchend", function() { move("forward", 0);});
				
				downButton.addEventListener("mousedown", function() { move("backward", 1);});
				downButton.addEventListener("touchstart", function() { move("backward", 1);});
				downButton.addEventListener("mouseup", function() { move("backward", 0);});
				downButton.addEventListener("touchend", function() { move("backward", 0);});
				
				rightButton.addEventListener("mousedown", function() { move("right", 1);});
				rightButton.addEventListener("touchstart", function() { move("right", 1);});
				rightButton.addEventListener("mouseup", function() { move("right", 0);});
				rightButton.addEventListener("touchend", function() { move("right", 0);});
			</script>
		</div>
	</body>
</html> )=====";


const char settingsHtml[] PROGMEM = R"=====(
<!doctype html>
<html>
	<head>
		<meta http-equiv="Content-type" content="text/html; charset=utf-8">
		<title>Balancig robot</title>
		<link rel="stylesheet" type="text/css" href="/general.css">
	</head>
	<body onload="loadPage()">                                            
		<ul class="navbar">                                                      
			<li><a href="/">Control</a></li>                            
			<li><a href="/settings">Settings</a></li>                       
			<li><a href="/about">About</a></li>                                
		</ul>                                                                      
																					
		<div class="viewbox">     
			<label style="display: inline-block; margin-left: 3%; margin-top: 10px;">PID settings:</label>
			<table class="sliderContainer">  
				<tr>
					<td width="90%"><input type="range" oninput="sendData()" min="0" max="0" class="pidSlider" id="pSlider"></td>
					<td width="10%"><label class="pidLabel" id="pLabel">kP: </label></td>
				</tr>
				<tr>
					<td width="90%"><input type="range" oninput="sendData()" min="0" max="0" class="pidSlider" id="iSlider"></td>
					<td width="10%"><label class="pidLabel" id="iLabel">kI: </label></td>
				</tr>
				<tr>
					<td width="90%"><input type="range" oninput="sendData()" min="0" max="0" class="pidSlider" id="dSlider"></td>
					<td width="10%"><label class="pidLabel" id="dLabel">kD: </label></td>
				</tr>
				<tr>
					<td width="90%" text-align="center"><input type="button" onclick="saveData()" class="sladerButton" id="saveButton" value="Save"></td>
					<td width="10%"></label></td>
				</tr>
				
			</div>                                                                  
		</div>                                                                    
		<script>                                                                  
			function loadPage() {getData();}    
			
			function getData() {                                                    
				var xhttp = new XMLHttpRequest();                                       
				xhttp.onreadystatechange = function() {                                 
					if (this.readyState == 4 && this.status == 200) {                     
						var obj = JSON.parse(this.responseText);                          
						var pSldr = document.getElementById("pSlider");                   
						var iSldr = document.getElementById("iSlider");                   
						var dSldr = document.getElementById("dSlider");                                              
						pSldr.max = obj.maxPvalue;                                          
						iSldr.max = obj.maxIvalue;                                          
						dSldr.max = obj.maxDvalue;                                          
						pSldr.step = obj.maxPvalue/100;                                     
						iSldr.step = obj.maxIvalue/100;                                     
						dSldr.step = obj.maxDvalue/100;                                     
						pSldr.value = obj.kP;                                               
						iSldr.value = obj.kI;                                               
						dSldr.value = obj.kD;           
						
						var pLbl = document.getElementById("pLabel");                   
						var iLbl = document.getElementById("iLabel");                   
						var dLbl = document.getElementById("dLabel"); 
						pLbl.innerHTML = 'kP: ' + obj.kP;
						iLbl.innerHTML = 'kI: ' + obj.kI;
						dLbl.innerHTML = 'kD: ' + obj.kD;	
					}                                                                     
				};                                                                      
				xhttp.open("GET", "getData", true);                                 
				xhttp.send();                                                           
			}                                                                       
																					
			function sendData()                                                     
			{                                                                       
				var xhttp = new XMLHttpRequest();                                     
				xhttp.onreadystatechange = function() {                               
					if (this.readyState == 4 && this.status == 200) {                   
																						
					}                                                                   
				};                                                                    
				var kP = document.getElementById("pSlider").value;                  
				var kI = document.getElementById("iSlider").value;                  
				var kD = document.getElementById("dSlider").value;
				
				xhttp.open("GET", "setPid?kP="+kP+"&kI="+kI+"&kD="+kD, true);          
				xhttp.send();
				
				var pLbl = document.getElementById("pLabel");                   
				var iLbl = document.getElementById("iLabel");                   
				var dLbl = document.getElementById("dLabel"); 
				pLbl.innerHTML = 'kP: ' + kP;
				iLbl.innerHTML = 'kI: ' + kI;
				dLbl.innerHTML = 'kD: ' + kD;	
			} 
			
			function saveData()                                                     
			{
				var xhttp = new XMLHttpRequest();
				xhttp.open("GET", "saveData", true);          
				xhttp.send();
			}
		</script>                                                                 
	</body>                                                                     
</html> )=====";

const char aboutHtml[] PROGMEM = R"=====(
<!doctype html>
<html>
	<head>
		<meta http-equiv="Content-type" content="text/html; charset=utf-8">
		<title>Balancig robot</title>
		<link rel="stylesheet" type="text/css" href="/general.css">
	</head>
	<body>
		<ul class="navbar">
		<li><a href="/">Control</a></li>
		<li><a href="/settings">Settings</a></li>
		<li><a href="/about">About</a></li>
		</ul>
		
		<div class="viewbox">
			<div style="display: inline-block; margin-left: 3%; margin-top: 20px;">  
				<h1 style="margin: 0px;">
					Check my youtube channel 
					<a href="https://www.youtube.com/channel/UCHRTaqr8KSCfyo2_CLH-yfg">TrashRobotics</a> :)  
					<h5 style="margin: 0px;"><sub>yes, I know that you are on the local network... :)</sub></h5>
				</h1>
				
			</div>
		</div>

	</body>
</html>
)=====";

const char generalCss[] PROGMEM = R"=====(
html{
  width: 100%;
  height: 100%;
}

body {
  position:absolute; top:0; bottom:0; right:0; left:0;
  margin: 0;
  background-color: #000000;
}

.navbar ul{
  display: none;
  background-color: #000000;
}

.navbar, .navbar ul{
  margin: 0;
  padding: 0;
}

.navbar {
  height: 5%;
  min-height: 60px;
  background-color: #000000;
  padding-left: 1%;
  min-width: 500px;
}

.navbar li {
  float: left;
  position: relative;
  height: 100%;
  display: table;
}

.navbar li a {
  display: table-cell;
  padding: 6px;
  width: 100px;
  color: #ffffff;
  text-decoration: none;
  text-align: center;
  vertical-align: middle;
}

.navbar ul li { float: none; }
.navbar li:hover { background-color: #32bee6; }

.viewbox {
  background: #ffffff;
  height: 90%;
  width: 98%;
  transform: translate(1%, 0);;
}

.arrow {
  padding: 0;
  width: 100%;
  height: 100%;  
  background: #ffffff;
}    

.arrow.left {
  border-left: 20px solid #000000;
  border-top: 20px solid #000000;
  border-top-left-radius: 5px;
}
.arrow.up {
  border-top: 20px solid #000000;
  border-right: 20px solid #000000;
  border-top-right-radius: 5px;
}
.arrow.right {
  border-right: 20px solid #000000;
  border-bottom: 20px solid #000000;
  border-right-bottom-radius: 5px;
}
.arrow.down {
  border-left: 20px solid #000000;
  border-bottom: 20px solid #000000;
  border-bottom-left-radius: 5px;
}    

.controlPanel {
  position: absolute;
  top: calc(50% - min(30vw, 30vh)/2);
  left: calc(50% - min(30vw, 30vh)/2);
  width: min(30vw, 30vh);
  height: min(30vw, 30vh);
  padding: 0;
  transform: rotate(-45deg);
}  

.controlTable{
  table-layout: fixed;
  border-spacing: 5;
  width: 100%;
  height: 100%;
}

.controlTable tr, .controlTable td{
  width: 50%;
  height: 50%;
  padding: 0;
}

.central {
  padding: 0;   
  border-radius: 3px;
  background: #000000;
  width: 35%;
  height: 35%;
  position: absolute;
  top: calc(50% - 35%/2);
  left: calc(50% - 35%/2);
}

.sliderContainer {
  width: 95%; 
  height: 60%; 
  max-height: 400px;
  position: absolute;
  top: 30px;
  left: calc(5%/2);
}

.sliderContainer tr{ 
}

.sliderContainer td{
  height: 30%;
}

.pidLabel {
  width: 100%;
  height: 100%;
  padding: 15px;
}

.pidSlider {
  -webkit-appearance: none; 
  appearance: none;
  width: 100%; 
  height: 2vh; 
  background: #006fff;
  outline: none;
  opacity: 0.8;
  -webkit-transition: .4s;  
  transition: opacity .4s;
}

.pidSlider:hover {
  opacity: 1; 
}

.pidSlider::-webkit-slider-thumb {
  -webkit-appearance: none; 
  appearance: none;
  width: 3vh; 
  height: 3vh; 
  border-radius: 0.8vh;
  background: #000000; 
  cursor: pointer; 
}

.pidSlider::-moz-range-thumb {
  width: 3vh; 
  height: 3vh; 
  background: #000000; 
  cursor: pointer; 
}

.sladerButton {
  height: 100%;
  min-height: 50px;
  min-width: 80px;
  float:right;
  background-color: #006fff;
  color: #ffffff;
  text-decoration: none;
  text-align: center;
  vertical-align: middle;
  border-color: #32bee6;
} )=====";













































uint8_t MEANING_OF_LIFE = 0x2A;
